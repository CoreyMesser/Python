import random

COLORS = ['yellow', 'red', 'blue', 'green']

# from combat import Combat
class Monster(Combat):
    min_hp = 1
    max_hp = 1
    min_exp = 1
    max_exp = 1
    weapon = 'sword'
    sound = 'roar'
    #loot/armor etc

    def __init__(self, **kwargs):
        self.hit_points = random.randint(self.min_hp, self.max_hp)
        self.experience = random.randint(self.min_exp, self.max_exp)
        self.color = random.choice(COLORS)

        for key, value in kwargs.items():
            setattr(self, key, value)

    def __str__(self):
        return '{} {}, HP: {}, XP: {}'.format(self.color.title(),
                                              self.__class__.__name__,
                                              self.hit_points,
                                              self.experience)
        # self.hit_points = kwargs.get('hit_points', 1)
        # self.weapon = kwargs.get('weapon', 'sword')
        # self.color = kwargs.get('color', 'yellow')
        # self.sound = kwargs.get('sound', 'ROAR')

    def battlecry(self):
        return self.sound.upper()

class Goblin(Monster):
    max_hp = 3
    max_exp = 2
    sound = 'squeak'

class Troll(Monster):
    min_hp = 3
    max_hp = 10
    max_exp = 10
    sound = "gurgle"

class Dragon(Monster):
    min_hp = 10
    max_hp = 20
    min_exp = 10
    max_exp = 20

# >>>>>>>
# from combat import Combat
class Character(Combat):
    attack_limit = 10
    exp = 0
    hp = 10

    def attack(self):
        roll = random.randint(1, self.attack_limit)
        if self.weapon == 'sword':
            roll += 1
        if self.weapon == 'axe':
            roll += 2
        return roll > 4

    def get_weapon(self):
        weapon_choice = self.weapon = input('Weapon ([S]word, [A]xe, [B]ow):').lower()
        if weapon_choice in 'sab':
            if weapon_choice == 's':
                return 'sword'
            elif weapon_choice == 'a':
                return 'axe'
            elif weapon_choice == 'b':
                return 'bow'


    def __init__(self, **kwargs):
        self.name = input("Name: ")
        self.weapon = self.get_weapon()
        self.hp = self.base_hp

        for key, value in kwargs.items():
            setattr(self, key, value)

    def __str__(self):
        return '{}, HP: {}, XP: {}'.format(self.name, self.hp, self.exp)

    def rest(self):
        if self.hp < self.base_hp:
            self.hp += 1

    def leveled_up(self):
        return self.exp >= 5


# >>>>>>
class Combat(object):
    dodge_limit = 6
    attack_limit = 6

    def dodge(self):
        roll = random.randint(1, self.dodge_limit)
        return roll > 4

    def attack(self):
        roll = random.randint(1, self.attack_limit)
        return roll > 4

if __name__ == '__main__':
    tr = Monster()
    tr.hours()